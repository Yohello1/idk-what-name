#+TITLE Engine Dev path
#+AUTHOR: Yo Hello
#+EMAIL: mp2702737@gmail.com

* Current Dev pat
- [11/11] Text rendering
  - [X] Conduct research on fesability to do it inhouse
  - [X] Chose to use STB_TrueType
  - [X] Read the docs
  - [X] Stand-alone implementation
  - [X] Figuring out what needs to be split up
  - [X] Write out the parts needed
  - [X] Basic Implementation into engine
  - [X] Colours
  - [X] Colour blending
  - [X]  Cords
  - [X] Un cancerousingx

- [X] restructure it to not be cancerous
- [6/6] Do the `#if` things to run debug garbage
  - [X] Terrain.hpp
  - [X] input.hpp (and input_Large), should merge into one file though
  - [X] Vector math
  - [X] Physics .hpp
  - [X] Render.hpp
  - [X] ui.hp
- [ ] Write a test
- [X] Proper ECS system
  - [X] manager
  - [X] entntiy
  - [X] Typies
  - [X] Test
- [ ] Quality of Programming the engine life
  - [ ] Switching to type def
- [-] Render life
  - [ ] Figure out how to run the map -> Material -> Img
  - [ ] Temp representation
  - [ ] Pressure representation
  - [ ] Make vert & Frag shader
  - [ ] Make UI stuff diff vert shaders?
  - [ ] Make material class, and port everything over to refernce the material instead
  - [ ] Send material data to GPU
  - [ ] Send map of the cells' materials to the GPU
  - [ ] Render that stuff out
  - How will rendering work?
    Well firstly it will send data like scaling, display size, and set that as a 'uniform', as this will be used everywhere
    Then it will get 2 sets of verts (as of now, may change in the future), one set will be the GUI parts, another will just encapsulate the entire background
    Then it does that stuff in the
  - [ ] Oragnise, and refactor it to not be terrible
  - [X] Draw a sqaure
  - [X] Orthographic camera
  - [ ] Organise this part 15
- [1/4] optimisation
  - [X] Chunk simulation
  - [ ] Multi threading (Physics)
  - [ ] Rewrite SDL code in uh, opengl (I dont have a choice)
    - [ ] Open a window
    - [ ] Display colours
    - [ ] Frag/vert shader
    - [ ] Compositor
  - [ ] New render method
- [ ] Import/Export maps
- [ ] Write a proper input system
- [7/8] Final version of physics system
  - [X] Correct types
  - [X] Data handling
  - [X] Basic add and subtract from neighbouxr
  - [X] Method to put new_version to pixels
    - [X] Add value to new_version
    - [X] Add data from new_version + pixels -> pixels, new_versio.reset()
    - [X] stuff u can figure it out future me
  - [X] Basic add and subtract from neighbours
  - [X] Find issue with pressure exiting/entering from random points
  - [X] Create seperate thread which checks for inconsitenceis
  - [ ] Port pressure to temp

* Bugs

* Future Problem
- [ ] documentation
- Parallize this
* Resources

* Notes
- Colour thing is gonna be complex (just turn them into vectors then ge the avg) https://stackoverflow.com/questions/1351442/is-there-an-algorithm-for-color-mixing-that-works-like-mixing-real-colors
-
